/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Logic;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import static javax.swing.GroupLayout.Alignment.values;
import javax.swing.JOptionPane;
import static javax.swing.LayoutStyle.ComponentPlacement.values;

/**
 *
 * @author bccas
 */
public class FRMencryption extends javax.swing.JFrame {

    /**
     * Creates new form FRMencryption
     */
    public String[] table = {
        "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
        "N", "Ã‘", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", " "
    };

    public int[][] matrixA = new int[3][3];
    public int[][] matrixB;
    public int[][] matrixM;
    public int[][] matrixC;
    public int[][] matrixMDecrypted;

    public int limit = 0;

    public FRMencryption() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmdLoadA = new javaswing.controls.ButtonCustom();
        cmdLoadB = new javaswing.controls.ButtonCustom();
        txtMessage = new javaswing.controls.TextField();
        cmdEncryption = new javaswing.controls.ButtonCustom();
        jLabel2 = new javax.swing.JLabel();
        txtEncryptedMessage = new javaswing.controls.TextField();
        cmdDecrypt = new javaswing.controls.ButtonCustom();
        lblResult = new javax.swing.JLabel();
        lblStatusA = new javax.swing.JLabel();
        lblStatusB = new javax.swing.JLabel();
        lblLimit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        cmdLoadA.setText("Cargar  Matriz A");
        cmdLoadA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLoadAActionPerformed(evt);
            }
        });

        cmdLoadB.setText("Cargar Matriz B");
        cmdLoadB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdLoadBActionPerformed(evt);
            }
        });

        txtMessage.setLabelText("Mensaje");
        txtMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMessageActionPerformed(evt);
            }
        });
        txtMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMessageKeyTyped(evt);
            }
        });

        cmdEncryption.setText("Encriptar");
        cmdEncryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdEncryptionActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Encriptacion");

        txtEncryptedMessage.setLabelText("Mensaje encriptado");

        cmdDecrypt.setText("Desencriptar");
        cmdDecrypt.setStyle(javaswing.controls.ButtonCustom.ButtonStyle.DESTRUCTIVE);
        cmdDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDecryptActionPerformed(evt);
            }
        });

        lblResult.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblResult.setForeground(new java.awt.Color(0, 0, 0));
        lblResult.setText("Mensaje desencriptado: ");

        lblStatusA.setText("Sin archivo");

        lblStatusB.setText("Sin archiivo");

        lblLimit.setForeground(new java.awt.Color(0, 0, 0));
        lblLimit.setText("Carctares disponibles: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtEncryptedMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmdLoadA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblStatusA, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblStatusB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdLoadB, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(cmdEncryption, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLimit)
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmdLoadA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatusA)
                        .addGap(16, 16, 16)
                        .addComponent(cmdLoadB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatusB))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmdEncryption, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEncryptedMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmdDecrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(lblResult)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdLoadAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLoadAActionPerformed
        // TODO add your handling code here:
        // Seleccionar el archivo a cargar
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);

        if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileChooser.getSelectedFile();

            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                int row = 0;

                while ((line = br.readLine()) != null && row < 3) {
                    String[] values = line.split(",");
                    for (int col = 0; col < values.length && col < 3; col++) {
                        matrixA[row][col] = Integer.parseInt(values[col]);
                    }
                    row++;
                }

            } catch (IOException e) {
                e.printStackTrace();
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }
        printMatrixA();
        lblStatusA.setText("Cargado Exitoso");


    }//GEN-LAST:event_cmdLoadAActionPerformed

    private void cmdLoadBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdLoadBActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);

        if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileChooser.getSelectedFile();
            List<int[]> tempList = new ArrayList<>();

            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;

                while ((line = br.readLine()) != null) {
                    String[] values = line.split(",");
                    int[] intValues = new int[values.length];
                    for (int i = 0; i < values.length; i++) {
                        intValues[i] = Integer.parseInt(values[i]);
                    }
                    tempList.add(intValues);
                }

                // Ahora convertir la lista a una matriz
                int rows = tempList.size();
                int cols = tempList.get(0).length; // Se asume que todas las filas tienen el mismo nÃºmero de columnas
                matrixB = new int[rows][cols];
                limit = rows * cols;
                for (int i = 0; i < rows; i++) {
                    matrixB[i] = tempList.get(i);
                }

            } catch (IOException e) {
                e.printStackTrace();
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }
        printMatrixB();
        System.out.println("Limit: " + limit);
        lblStatusB.setText("Cargado Exitoso");
        lblLimit.setText("Carctares disponibles: " + limit);
    }//GEN-LAST:event_cmdLoadBActionPerformed

    private void cmdEncryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdEncryptionActionPerformed
        // TODO add your handling code here:
        if (!txtMessage.getText().isBlank()) {
            createMatrixM();
            performOperation();
        } else {
            JOptionPane.showMessageDialog(null, "Dato vacio");
        }

    }

    private void createMatrixM() {
        String message = txtMessage.getText().toUpperCase(); // Asegurarse de que el mensaje estÃ© en mayÃºsculas

        // Calcular el nÃºmero de columnas necesarias
        int numChars = message.length();
        int numCols = (int) Math.ceil((double) numChars / 3.0);

        // Inicializar la matriz
        matrixM = new int[3][numCols];

        // Rellenar la matriz con los Ã­ndices
        int charIndex = 0;
        for (int col = 0; col < numCols; col++) {
            for (int row = 0; row < 3; row++) {
                if (charIndex < numChars) {
                    char c = message.charAt(charIndex);
                    int index = getIndexInTable(c);
                    matrixM[row][col] = (index != -1) ? index : 27; // Usar 27 si el carÃ¡cter no estÃ¡ en la tabla
                    charIndex++;
                } else {
                    matrixM[row][col] = 27; // Rellenar con 27 si se acaba el mensaje
                }
            }
        }
        printMatrixM();
    }

    // MÃ©todo auxiliar para obtener el Ã­ndice de un carÃ¡cter en la tabla
    private int getIndexInTable(char c) {
        for (int i = 0; i < table.length; i++) {
            if (table[i].charAt(0) == c) {
                return i;
            }
        }
        return -1; // Si el carÃ¡cter no estÃ¡ en la tabla

    }//GEN-LAST:event_cmdEncryptionActionPerformed

    private void performOperation() {
        // Verificar si las matrices tienen dimensiones compatibles
        if (matrixA[0].length != matrixM.length || matrixA.length != matrixB.length || matrixM[0].length != matrixB[0].length) {
            System.out.println("Las dimensiones de las matrices no son compatibles para la operaciÃ³n.");
            return;
        }

        // Calcular la matriz resultante de la multiplicaciÃ³n matrixA * matrixM
        int[][] tempResult = new int[matrixA.length][matrixM[0].length];
        for (int i = 0; i < matrixA.length; i++) {
            for (int j = 0; j < matrixM[0].length; j++) {
                for (int k = 0; k < matrixM.length; k++) {
                    tempResult[i][j] += matrixA[i][k] * matrixM[k][j];
                }
            }
        }

        // Sumar la matriz resultante de la multiplicaciÃ³n con matrixB para obtener matrixC
        matrixC = new int[matrixA.length][matrixB[0].length];
        String messageEnrypted = "";
        for (int i = 0; i < matrixA.length; i++) {
            for (int j = 0; j < matrixB[0].length; j++) {
                matrixC[i][j] = tempResult[i][j] + matrixB[i][j];
                messageEnrypted += String.valueOf(matrixC[i][j]) + " ";
            }
        }
        txtEncryptedMessage.setText(messageEnrypted);
        printMatrixC();
    }


    private void txtMessageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMessageKeyTyped
        // TODO add your handling code here:
        if ((limit - txtMessage.getText().length()) >= 0) {
            lblLimit.setText("Carctares disponibles: " + (limit - txtMessage.getText().length()));
        }

        javax.swing.JTextField textField = (javax.swing.JTextField) evt.getSource();
        if (textField.getText().length() >= limit) {

            evt.consume();  // Evita que el carÃ¡cter se aÃ±ada al texto
            java.awt.Toolkit.getDefaultToolkit().beep();  // Hace un sonido de advertencia
            JOptionPane.showMessageDialog(null, "Se llego al limite de mensajes");
        }

    }//GEN-LAST:event_txtMessageKeyTyped

    private void cmdDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDecryptActionPerformed
        // TODO add your handling code here:
        performDecryption();
        showMessage();
    }//GEN-LAST:event_cmdDecryptActionPerformed

    private void performDecryption() {
        // Calcular la inversa de matrixA
        double[][] inverseA = invertMatrix(matrixA);

        // Verificar si la inversa de matrixA es posible de calcular
        if (inverseA == null) {
            System.out.println("La matriz A no tiene inversa.");
            return;
        }

        // Calcular la diferencia entre matrixC y matrixB
        int[][] difference = new int[matrixC.length][matrixC[0].length];
        for (int i = 0; i < matrixC.length; i++) {
            for (int j = 0; j < matrixC[0].length; j++) {
                difference[i][j] = matrixC[i][j] - matrixB[i][j];

            }

        }
        System.out.println("");

        // Multiplicar la inversa de matrixA por la diferencia para obtener matrixMDecrypted
        matrixMDecrypted = multiplyMatrix(inverseA, difference);
        printMatrixMDescrypted();

    }

    // MÃ©todo para calcular la inversa de una matriz cuadrada
    private double[][] invertMatrix(int[][] matrix) {
        int n = matrix.length;
        double[][] augmentedMatrix = new double[n][2 * n];

        // Construir la matriz aumentada
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                augmentedMatrix[i][j] = matrix[i][j];
                augmentedMatrix[i][j + n] = (i == j) ? 1 : 0;
            }
        }

        // Aplicar eliminaciÃ³n gaussiana
        for (int i = 0; i < n; i++) {
            double pivot = augmentedMatrix[i][i];
            if (pivot == 0) {
                return null; // La matriz no tiene inversa
            }
            for (int j = 0; j < 2 * n; j++) {
                augmentedMatrix[i][j] /= pivot;
            }
            for (int k = 0; k < n; k++) {
                if (k != i) {
                    double factor = augmentedMatrix[k][i];
                    for (int j = 0; j < 2 * n; j++) {
                        augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];
                    }
                }
            }
        }

        // Extraer la parte derecha de la matriz aumentada (la inversa de matrix)
        double[][] inverse = new double[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                inverse[i][j] = augmentedMatrix[i][j + n];
            }
        }

        return inverse;
    }

    // MÃ©todo para multiplicar dos matrices
    private int[][] multiplyMatrix(double[][] matrix1, int[][] matrix2) {
        int m = matrix1.length;
        int n = matrix2[0].length;
        int p = matrix1[0].length;
        int[][] result = new int[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                double tempResult = 0.0;
                for (int k = 0; k < p; k++) {
                    tempResult += matrix1[i][k] * matrix2[k][j];
                }
                result[i][j] = (int) Math.round(tempResult);
            }
        }

        return result;
    }

    private void showMessage() {
        String messageResult = "";
        for (int j = 0; j < matrixMDecrypted[0].length; j++) {
            for (int i = 0; i < matrixMDecrypted.length; i++) {
                messageResult += table[matrixMDecrypted[i][j]];
            }
        }

        System.out.println("Mensaje encontrado: " + messageResult);
        lblResult.setText("Mensaje desencriptado: " + messageResult);
    }

    private void txtMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMessageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMessageActionPerformed

    public void printMatrixC() {

        System.out.println("\nMatrixC:");
        for (int i = 0; i < matrixC.length; i++) {
            for (int j = 0; j < matrixC[i].length; j++) {
                System.out.print(matrixC[i][j] + " ");

            }
            System.out.println();
        }
    }

    public void printMatrixM() {

        System.out.println("\nMatrixM:");
        for (int i = 0; i < matrixM.length; i++) {
            for (int j = 0; j < matrixM[i].length; j++) {
                System.out.print(matrixM[i][j] + " ");

            }
            System.out.println();
        }
    }

    public void printMatrixMDescrypted() {

        System.out.println("\nMatrixMDescripted:");
        for (int i = 0; i < matrixMDecrypted.length; i++) {
            for (int j = 0; j < matrixMDecrypted[i].length; j++) {
                System.out.print(matrixMDecrypted[i][j] + " ");

            }
            System.out.println();
        }
    }

    public void printMatrixB() {
        System.out.println("\nMatrixB:");
        for (int i = 0; i < matrixB.length; i++) {
            for (int j = 0; j < matrixB[i].length; j++) {
                System.out.print(matrixB[i][j] + " ");

            }
            System.out.println();
        }
    }

    public void printMatrixA() {
        System.out.println("\nMatrixA:");
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(matrixA[i][j] + " ");
            }
            System.out.println("");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRMencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRMencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRMencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRMencryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FRMencryption().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javaswing.controls.ButtonCustom cmdDecrypt;
    private javaswing.controls.ButtonCustom cmdEncryption;
    private javaswing.controls.ButtonCustom cmdLoadA;
    private javaswing.controls.ButtonCustom cmdLoadB;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblLimit;
    private javax.swing.JLabel lblResult;
    private javax.swing.JLabel lblStatusA;
    private javax.swing.JLabel lblStatusB;
    private javaswing.controls.TextField txtEncryptedMessage;
    private javaswing.controls.TextField txtMessage;
    // End of variables declaration//GEN-END:variables
}
